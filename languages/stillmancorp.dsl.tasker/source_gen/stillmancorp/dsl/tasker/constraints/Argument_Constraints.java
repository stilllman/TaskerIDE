package stillmancorp.dsl.tasker.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;

public class Argument_Constraints extends BaseConstraintsDescriptor {
  public Argument_Constraints() {
    super("stillmancorp.dsl.tasker.structure.Argument");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("meta", new BaseReferenceConstraintsDescriptor("meta", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_tzteje_a0a0a0a0a1a0b0a1a3;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SimpleRoleScope.forNamedElements(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(), "stillmancorp.dsl.tasker.structure.IHasArguments"), "meta", false), SLinkOperations.findLinkDeclaration("stillmancorp.dsl.tasker.structure.IHasParameters", "parameters"));
          }
        };
      }
    });
    return references;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(parentNode, "stillmancorp.dsl.tasker.structure.IHasArguments") && !(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parentNode, "stillmancorp.dsl.tasker.structure.IHasArguments"), "arguments", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "meta", false);
      }
    }).contains(SLinkOperations.getTarget(node, "meta", false)));
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:4cf03323-d088-4018-ab6b-8114c87c610c(stillmancorp.dsl.tasker.constraints)", "9210013573146490166");
  private static SNodePointer breakingNode_tzteje_a0a0a0a0a1a0b0a1a3 = new SNodePointer("r:4cf03323-d088-4018-ab6b-8114c87c610c(stillmancorp.dsl.tasker.constraints)", "9210013573147120581");
}
