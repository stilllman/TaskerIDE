package stillmancorp.dsl.tasker.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class MakeOptional_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public MakeOptional_Intention() {
  }

  public String getConcept() {
    return "stillmancorp.dsl.tasker.structure.Parameter";
  }

  public String getPresentation() {
    return "MakeOptional";
  }

  public String getPersistentStateKey() {
    return "stillmancorp.dsl.tasker.intentions.MakeOptional_Intention";
  }

  public String getLanguageFqName() {
    return "stillmancorp.dsl.tasker";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:7b7d240e-af7c-4889-ab03-0b451be4f52c(stillmancorp.dsl.tasker.intentions)", "5178289858535852203");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new MakeOptional_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (SPropertyOperations.getBoolean(node, "optional") ? "Make Mandatory" : "Make Optional");
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(node, "optional", "" + (!(SPropertyOperations.getBoolean(node, "optional"))));
    }

    public IntentionDescriptor getDescriptor() {
      return MakeOptional_Intention.this;
    }
  }
}
